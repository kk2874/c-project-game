#include <SDL.h>
#include <iostream>
#include <vector>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const int PADDLE_WIDTH = 100;
const int PADDLE_HEIGHT = 20;
const int BALL_SIZE = 15;
const int BRICK_WIDTH = 75;
const int BRICK_HEIGHT = 30;
const int ROWS = 5;
const int COLS = 10;

struct Brick {
    SDL_Rect rect;
    bool destroyed;
};

bool init(SDL_Window** window, SDL_Renderer** renderer) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return false;
    }
    *window = SDL_CreateWindow("Brick Breaker", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (*window == nullptr) {
        std::cerr << "Window could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return false;
    }
    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);
    if (*renderer == nullptr) {
        std::cerr << "Renderer could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return false;
    }
    return true;
}

void close(SDL_Window* window, SDL_Renderer* renderer) {
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
}

int main(int argc, char* args[]) {
    SDL_Window* window = nullptr;
    SDL_Renderer* renderer = nullptr;

    if (!init(&window, &renderer)) {
        std::cerr << "Failed to initialize!" << std::endl;
        return -1;
    }

    SDL_Rect paddle = { SCREEN_WIDTH / 2 - PADDLE_WIDTH / 2, SCREEN_HEIGHT - 50, PADDLE_WIDTH, PADDLE_HEIGHT };
    SDL_Rect ball = { SCREEN_WIDTH / 2 - BALL_SIZE / 2, SCREEN_HEIGHT / 2 - BALL_SIZE / 2, BALL_SIZE, BALL_SIZE };
    int ballVelX = 4, ballVelY = -4;

    std::vector<Brick> bricks;
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            Brick brick = { { j * BRICK_WIDTH, i * BRICK_HEIGHT, BRICK_WIDTH, BRICK_HEIGHT }, false };
            bricks.push_back(brick);
        }
    }

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
        }

        const Uint8* currentKeyStates = SDL_GetKeyboardState(nullptr);
        if (currentKeyStates[SDL_SCANCODE_LEFT]) {
            paddle.x -= 5;
            if (paddle.x < 0) {
                paddle.x = 0;
            }
        }
        if (currentKeyStates[SDL_SCANCODE_RIGHT]) {
            paddle.x += 5;
            if (paddle.x > SCREEN_WIDTH - PADDLE_WIDTH) {
                paddle.x = SCREEN_WIDTH - PADDLE_WIDTH;
            }
        }

        ball.x += ballVelX;
        ball.y += ballVelY;

        if (ball.x <= 0 || ball.x + BALL_SIZE >= SCREEN_WIDTH) {
            ballVelX = -ballVelX;
        }
        if (ball.y <= 0) {
            ballVelY = -ballVelY;
        }
        if (ball.y + BALL_SIZE >= SCREEN_HEIGHT) {
            std::cout << "Game Over!" << std::endl;
            quit = true;
        }

        if (SDL_HasIntersection(&ball, &paddle)) {
            ballVelY = -ballVelY;
        }

        for (auto& brick : bricks) {
            if (!brick.destroyed && SDL_HasIntersection(&ball, &brick.rect)) {
                brick.destroyed = true;
                ballVelY = -ballVelY;
                break;
            }
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderFillRect(renderer, &paddle);
        SDL_RenderFillRect(renderer, &ball);

        for (const auto& brick : bricks) {
            if (!brick.destroyed) {
                SDL_RenderFillRect(renderer, &brick.rect);
            }
        }

        SDL_RenderPresent(renderer);
        SDL_Delay(16);
    }

    close(window, renderer);
    return 0;
}
