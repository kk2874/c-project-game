#include <SDL.h>
#include <random>
#include <vector>

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 600;
const int BALL_RADIUS = 20;
const int BRICK_WIDTH = 100;
const int BRICK_HEIGHT = 50;
const int NUM_BRICKS_X = 8;
const int NUM_BRICKS_Y = 5;
const int PADDLE_WIDTH = 100;
const int PADDLE_HEIGHT = 20;
const int PADDLE_SPEED = 30;
const float BALL_SPEED = 0.05; 
// 공 구조체 정의
struct Ball {
    float x, y;   // 좌표
    float vx, vy;   // 속도
    int radius;   // 반지름
};
// 블록 구조체 정의
struct Brick {
    int x, y;   //좌표
    int width, height;   // 크기
    SDL_Color color;   // 색상
    bool active;   // 활성화 여부
};
// 패들 구조체 정
struct Paddle {
    float x, y;  // 좌표 
    int width, height;  // 크기
    SDL_Color color; // 색상
};

int main(int argc, char* argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    // 창 생성 및 랜더러 초기
    SDL_Window* window = SDL_CreateWindow("Brick Breaker", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
   // 공 초기화
    Ball ball = { WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2 - BALL_RADIUS * 2, BALL_SPEED, -BALL_SPEED, BALL_RADIUS };
    std::vector<Brick> bricks;
    // 패들 초기
    Paddle paddle = { WINDOW_WIDTH / 2 - PADDLE_WIDTH / 2, WINDOW_HEIGHT - PADDLE_HEIGHT, PADDLE_WIDTH, PADDLE_HEIGHT, {255, 255, 255} };
    // 벽돌 초기화
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> colDist(0.0, 1.0);

    for (int y = 0; y < NUM_BRICKS_Y; y++) {
        for (int x = 0; x < NUM_BRICKS_X; x++) {
            Brick brick = {
                x * BRICK_WIDTH, y * BRICK_HEIGHT,
                BRICK_WIDTH, BRICK_HEIGHT,
                {(Uint8)(colDist(gen) * 255), (Uint8)(colDist(gen) * 255), (Uint8)(colDist(gen) * 255)},
                true
            };
            bricks.push_back(brick);
        }
    }
   // 게임 루프 
    bool running = true;
    while (running) {
        // 이벤트 처
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                running = false;
            }
            else if (event.type == SDL_KEYDOWN) {
                // 왼쪽 키 입력 시 패들 왼쪽 이동
                if (event.key.keysym.sym == SDLK_LEFT) {
                    paddle.x -= PADDLE_SPEED;
                    if (paddle.x < 0) {
                        paddle.x = 0;
                    }
                }
                // 오른쪽 키 입력 시 패들 오른쪽 이동
                else if (event.key.keysym.sym == SDLK_RIGHT) {
                    paddle.x += PADDLE_SPEED;
                    if (paddle.x + paddle.width > WINDOW_WIDTH) {
                        paddle.x = WINDOW_WIDTH - paddle.width;
                    }
                }
            }
        }

        ball.x += ball.vx;  // 볼의 x좌표를 x속도만큼 이동
        ball.y += ball.vy;  // 볼의 y좌표를 y속도만큼 이동

        // 볼과 벽의 충돌 처리
        if (ball.x - ball.radius < 0 || ball.x + ball.radius > WINDOW_WIDTH) {
            ball.vx *= -1;
        }
        if (ball.y - ball.radius < 0) {
            ball.vy *= -1;
        }
        // 볼과 패들의 충돌 처리
        if (ball.y + ball.radius >= paddle.y && ball.y + ball.radius <= paddle.y + paddle.height &&
            ball.x >= paddle.x && ball.x <= paddle.x + paddle.width) {
            ball.vy *= -1;
        }
        if (ball.y + ball.radius > WINDOW_HEIGHT) {
            running = false;   // 게임 종료
        }

        // 볼과 벽돌의 충돌 처리
        for (auto& brick : bricks) {
            if (brick.active && ball.x + ball.radius > brick.x && ball.x - ball.radius < brick.x + brick.width &&
                ball.y + ball.radius > brick.y && ball.y - ball.radius < brick.y + brick.height) {
                brick.active = false;   // 벽돌을 비활성화
                if (ball.x < brick.x || ball.x > brick.x + brick.width) {
                    ball.vx *= -1;
                }
                else {
                    ball.vy *= -1;
                }
            }
        }
       // 화면 렌더링
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);   // 배경 색상 설정
        SDL_RenderClear(renderer);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);  // 볼 색상 설정
        SDL_Rect ballRect = { (int)(ball.x - ball.radius), (int)(ball.y - ball.radius), ball.radius * 2, ball.radius * 2 };
        SDL_RenderFillRect(renderer, &ballRect);   // 볼 그리기

        SDL_SetRenderDrawColor(renderer, paddle.color.r, paddle.color.g, paddle.color.b, 255);   // 패들 색상 설정
        SDL_Rect paddleRect = { (int)paddle.x, (int)paddle.y, paddle.width, paddle.height };
        SDL_RenderFillRect(renderer, &paddleRect);   // 패들 그리기

        for (const auto& brick : bricks) {
            if (brick.active) {
                SDL_SetRenderDrawColor(renderer, brick.color.r, brick.color.g, brick.color.b, 255);  // 벽돌 색상 설정
                SDL_Rect brickRect = { brick.x, brick.y, brick.width, brick.height };
                SDL_RenderFillRect(renderer, &brickRect);   // 벽돌 그리기
            }
        }

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
